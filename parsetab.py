
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftPLUSMINUSleftMULTIPLYDIVIDErightPOWERAND DIVIDE EQUALS FLOAT INT MINUS MULTIPLY NAME OR PLUS POWER\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : NAME EQUALS expression\n    \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression POWER expression\n               | expression AND expression\n               | expression OR expression\n\n    \n    expression : INT\n               | FLOAT\n    \n    expression : NAME\n    \n    empty :\n    '
    
_lr_action_items = {'INT':([0,8,9,10,11,12,13,14,15,],[5,5,5,5,5,5,5,5,5,]),'FLOAT':([0,8,9,10,11,12,13,14,15,],[6,6,6,6,6,6,6,6,6,]),'NAME':([0,8,9,10,11,12,13,14,15,],[7,17,17,17,17,17,17,17,17,]),'$end':([0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23,24,],[-15,0,-1,-2,-3,-12,-13,-14,-5,-14,-6,-7,-8,-9,-10,-11,-4,]),'MULTIPLY':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[8,-12,-13,-14,-5,-14,-6,8,8,-9,8,8,8,]),'DIVIDE':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[9,-12,-13,-14,-5,-14,-6,9,9,-9,9,9,9,]),'PLUS':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[10,-12,-13,-14,-5,-14,-6,-7,-8,-9,10,10,10,]),'MINUS':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[11,-12,-13,-14,-5,-14,-6,-7,-8,-9,11,11,11,]),'POWER':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[12,-12,-13,-14,12,-14,12,12,12,12,12,12,12,]),'AND':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[13,-12,-13,-14,-5,-14,-6,-7,-8,-9,-10,-11,13,]),'OR':([2,5,6,7,16,17,18,19,20,21,22,23,24,],[14,-12,-13,-14,-5,-14,-6,-7,-8,-9,-10,-11,14,]),'EQUALS':([7,],[15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,8,9,10,11,12,13,14,15,],[2,16,18,19,20,21,22,23,24,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','compiler.py',78),
  ('calc -> var_assign','calc',1,'p_calc','compiler.py',79),
  ('calc -> empty','calc',1,'p_calc','compiler.py',80),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','compiler.py',86),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','compiler.py',94),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','compiler.py',95),
  ('expression -> expression PLUS expression','expression',3,'p_expression','compiler.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_expression','compiler.py',97),
  ('expression -> expression POWER expression','expression',3,'p_expression','compiler.py',98),
  ('expression -> expression AND expression','expression',3,'p_expression','compiler.py',99),
  ('expression -> expression OR expression','expression',3,'p_expression','compiler.py',100),
  ('expression -> INT','expression',1,'p_expression_int_float','compiler.py',108),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','compiler.py',109),
  ('expression -> NAME','expression',1,'p_expression_var','compiler.py',115),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',126),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> empty
Rule 4     var_assign -> NAME EQUALS expression
Rule 5     expression -> expression MULTIPLY expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> expression PLUS expression
Rule 8     expression -> expression MINUS expression
Rule 9     expression -> expression POWER expression
Rule 10    expression -> expression AND expression
Rule 11    expression -> expression OR expression
Rule 12    expression -> INT
Rule 13    expression -> FLOAT
Rule 14    expression -> NAME
Rule 15    empty -> <empty>

Terminals, with rules where they appear

AND                  : 10
DIVIDE               : 6
EQUALS               : 4
FLOAT                : 13
INT                  : 12
MINUS                : 8
MULTIPLY             : 5
NAME                 : 4 14
OR                   : 11
PLUS                 : 7
POWER                : 9
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 3
expression           : 1 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . empty
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME
    (4) var_assign -> . NAME EQUALS expression
    (15) empty -> .

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 7
    $end            reduce using rule 15 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    $end            reduce using rule 1 (calc -> expression .)
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    POWER           shift and go to state 12
    AND             shift and go to state 13
    OR              shift and go to state 14


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> empty .

    $end            reduce using rule 3 (calc -> empty .)


state 5

    (12) expression -> INT .

    MULTIPLY        reduce using rule 12 (expression -> INT .)
    DIVIDE          reduce using rule 12 (expression -> INT .)
    PLUS            reduce using rule 12 (expression -> INT .)
    MINUS           reduce using rule 12 (expression -> INT .)
    POWER           reduce using rule 12 (expression -> INT .)
    AND             reduce using rule 12 (expression -> INT .)
    OR              reduce using rule 12 (expression -> INT .)
    $end            reduce using rule 12 (expression -> INT .)


state 6

    (13) expression -> FLOAT .

    MULTIPLY        reduce using rule 13 (expression -> FLOAT .)
    DIVIDE          reduce using rule 13 (expression -> FLOAT .)
    PLUS            reduce using rule 13 (expression -> FLOAT .)
    MINUS           reduce using rule 13 (expression -> FLOAT .)
    POWER           reduce using rule 13 (expression -> FLOAT .)
    AND             reduce using rule 13 (expression -> FLOAT .)
    OR              reduce using rule 13 (expression -> FLOAT .)
    $end            reduce using rule 13 (expression -> FLOAT .)


state 7

    (14) expression -> NAME .
    (4) var_assign -> NAME . EQUALS expression

    MULTIPLY        reduce using rule 14 (expression -> NAME .)
    DIVIDE          reduce using rule 14 (expression -> NAME .)
    PLUS            reduce using rule 14 (expression -> NAME .)
    MINUS           reduce using rule 14 (expression -> NAME .)
    POWER           reduce using rule 14 (expression -> NAME .)
    AND             reduce using rule 14 (expression -> NAME .)
    OR              reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)
    EQUALS          shift and go to state 15


state 8

    (5) expression -> expression MULTIPLY . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 16

state 9

    (6) expression -> expression DIVIDE . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 18

state 10

    (7) expression -> expression PLUS . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 19

state 11

    (8) expression -> expression MINUS . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 20

state 12

    (9) expression -> expression POWER . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 21

state 13

    (10) expression -> expression AND . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 22

state 14

    (11) expression -> expression OR . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 23

state 15

    (4) var_assign -> NAME EQUALS . expression
    (5) expression -> . expression MULTIPLY expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . expression MINUS expression
    (9) expression -> . expression POWER expression
    (10) expression -> . expression AND expression
    (11) expression -> . expression OR expression
    (12) expression -> . INT
    (13) expression -> . FLOAT
    (14) expression -> . NAME

    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    NAME            shift and go to state 17

    expression                     shift and go to state 24

state 16

    (5) expression -> expression MULTIPLY expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    MULTIPLY        reduce using rule 5 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 5 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 5 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 5 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 5 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 5 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 5 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 12

  ! POWER           [ reduce using rule 5 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 17

    (14) expression -> NAME .

    MULTIPLY        reduce using rule 14 (expression -> NAME .)
    DIVIDE          reduce using rule 14 (expression -> NAME .)
    PLUS            reduce using rule 14 (expression -> NAME .)
    MINUS           reduce using rule 14 (expression -> NAME .)
    POWER           reduce using rule 14 (expression -> NAME .)
    AND             reduce using rule 14 (expression -> NAME .)
    OR              reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)


state 18

    (6) expression -> expression DIVIDE expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    MULTIPLY        reduce using rule 6 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 6 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 6 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 6 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 12

  ! POWER           [ reduce using rule 6 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 19

    (7) expression -> expression PLUS expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    PLUS            reduce using rule 7 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 7 (expression -> expression PLUS expression .)
    AND             reduce using rule 7 (expression -> expression PLUS expression .)
    OR              reduce using rule 7 (expression -> expression PLUS expression .)
    $end            reduce using rule 7 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9
    POWER           shift and go to state 12

  ! MULTIPLY        [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 20

    (8) expression -> expression MINUS expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    PLUS            reduce using rule 8 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 8 (expression -> expression MINUS expression .)
    AND             reduce using rule 8 (expression -> expression MINUS expression .)
    OR              reduce using rule 8 (expression -> expression MINUS expression .)
    $end            reduce using rule 8 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9
    POWER           shift and go to state 12

  ! MULTIPLY        [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 8 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 21

    (9) expression -> expression POWER expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    MULTIPLY        reduce using rule 9 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 9 (expression -> expression POWER expression .)
    PLUS            reduce using rule 9 (expression -> expression POWER expression .)
    MINUS           reduce using rule 9 (expression -> expression POWER expression .)
    AND             reduce using rule 9 (expression -> expression POWER expression .)
    OR              reduce using rule 9 (expression -> expression POWER expression .)
    $end            reduce using rule 9 (expression -> expression POWER expression .)
    POWER           shift and go to state 12

  ! POWER           [ reduce using rule 9 (expression -> expression POWER expression .) ]
  ! MULTIPLY        [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]
  ! PLUS            [ shift and go to state 10 ]
  ! MINUS           [ shift and go to state 11 ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 22

    (10) expression -> expression AND expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    AND             reduce using rule 10 (expression -> expression AND expression .)
    OR              reduce using rule 10 (expression -> expression AND expression .)
    $end            reduce using rule 10 (expression -> expression AND expression .)
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    POWER           shift and go to state 12

  ! MULTIPLY        [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 10 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 23

    (11) expression -> expression OR expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    AND             reduce using rule 11 (expression -> expression OR expression .)
    OR              reduce using rule 11 (expression -> expression OR expression .)
    $end            reduce using rule 11 (expression -> expression OR expression .)
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    POWER           shift and go to state 12

  ! MULTIPLY        [ reduce using rule 11 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 11 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 11 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 11 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 13 ]
  ! OR              [ shift and go to state 14 ]


state 24

    (4) var_assign -> NAME EQUALS expression .
    (5) expression -> expression . MULTIPLY expression
    (6) expression -> expression . DIVIDE expression
    (7) expression -> expression . PLUS expression
    (8) expression -> expression . MINUS expression
    (9) expression -> expression . POWER expression
    (10) expression -> expression . AND expression
    (11) expression -> expression . OR expression

    $end            reduce using rule 4 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    POWER           shift and go to state 12
    AND             shift and go to state 13
    OR              shift and go to state 14

